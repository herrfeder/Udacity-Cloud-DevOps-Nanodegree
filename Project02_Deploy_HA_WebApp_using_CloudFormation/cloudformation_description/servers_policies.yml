Parameters:
# whatever you consider a changing value, put it as a parameter instead of hard-coding it into your script
Resources:
  #instace profile contains the IAM Role name(s) that we want to associate to our auto scaling EC2 Servers
  PROFILE_S3Instance:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Roles:
      - Ref: ROLE_S3ReadOnlyEC2


  ROLE_S3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        !Sub ${EnvironmentName}-Role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
          Action:
          - sts:AssumeRole
        Path: "/"
        Policies:
          - PolicyName: POLICY_S3ReadOnly
            PolicyDocument:
              Version: 2012-10-17
              Statement:
                - Effect: Allow
                  Action: 
                    - s3:Get*
                    - s3:List*
                  Resource: 
                    - arn:aws:s3:::${P_S3_Bucket_Name}
                    - arn:aws:s3:::${P_S3_Bucket_Name}/*


  SECGROUP_WebServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Ingress http and ssh and Egress all Ports
        VpcId: Fn::ImportValue: !Sub "${EnvironmentName}_VPC_HA_WebApp"
          SecurityGroupIngress:
            - IpProtocol: tcp
              FromPort: 80
              ToPort: 80
              CidrIp: 0.0.0.0/0            
            - IpProtocol: tcp
              FromPort: 22
              ToPort: 22
              CidrIp: 0.0.0.0/0
          SecurityGroupEgress:
            - IpProtocol: tcp
              FromPort: 0
              ToPort: 65535
              CidrIp: 0.0.0.0/0

  
  SECGROUP_LoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Ingress http and Egress http
      VpcId: Fn::ImportValue: !Sub "${EnvironmentName}_VPC_HA_WebApp"
      SecurityGroupIngress:
      -   IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
      -   IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0


  LAUNCHCONFIG_WebApp: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          cd /var/www/html
          aws s3 cp s3://${P_S3_Bucket_Name}/${P_S3_Bucket_Subdir} .
          unzip -o udacity.zip
      # Amazon Linux 2 AMI (HVM), SSD Volume Type (64-bit x86)
      ImageId: ami-0bd39c806c2335b95
      # t2.medium
      InstanceType: t2.medium
      #KeyName: platforms-key
      IamInstanceProfile: !Ref PROFILE_S3Instance
      SecurityGroups:
        - Ref: SECGROUP_WebServer
      BlockDeviceMappings:
        - DeviceName: "/dev/sda"
          Ebs:
            VolumeSize: '10'


  TARGETGROUP_WebApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      VpcId: Fn::ImportValue: !Sub "${EnvironmentName}_VPC_HA_WebApp"


  SNSTOPIC_autoscaling:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: "Autoscaling_Events"


  AUTOSCALINGGROUP_WebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
      - Fn::ImportValue: !Sub "${EnvironmentName}_SUBNETS_private"
      LaunchConfigurationName:
        Ref: LAUNCHCONFIG_WebApp
      MinSize: '2'
      MaxSize: '5'
      NotificationConfigurations:
      - TopicARN: !Ref SNSTOPIC_autoscaling
        NotificationTypes:
        - autoscaling:EC2_INSTANCE_LAUNCH
        - autoscaling:EC2_INSTANCE_LAUNCH_ERROR
        - autoscaling:EC2_INSTANCE_TERMINATE
        - autoscaling:EC2_INSTANCE_TERMINATE_ERROR
        - autoscaling:TEST_NOTIFICATION
      TargetGroupARNs:
        - Ref: WebAppTargetGroup
  

  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
      - Fn::ImportValue: !Sub "${EnvironmentName}_SUBNETS_private"
      SecurityGroups: [ !Ref SECGROUP_LoadBalancer ]
  
  LBListener: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: !Ref TARGETGROUP_WebApp
      LoadBalancerArn: !Ref WebAppLB
      Port: 80
      Protocol: HTTP
  
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions: 
        - Type: forward
          TargetGroupArn: !Ref WebAppTargetGroup
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref LBListener
      Priority: 1


Outputs: 
    

SUBNET_private_01
SUBNET_private_02
VPC_HA_WebApp    
