Parameters: 
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String
    Default: udacityIACproject
  PS3BucketName:
    Description: The name of the S3 bucket with desired files to be deployed
    Type: String
    AllowedPattern: ^[0-9a-zA-Z][0-9a-zA-Z-]*$
    Default: udacity-demo-1 
  PS3Filepath:
    Description: Filepath with zip extension
    Type: String
    AllowedPattern: ^.*\.zip$
    Default: udacity.zip

Resources:

  #########################
  ##### POLICY/PROFILE ####
  #########################
  
  ROLES3ReadOnlyEC2:
    Type: AWS::IAM::Role
    Properties:
      RoleName: 
        !Sub ${EnvironmentName}-S3role
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
        - Effect: Allow
          Principal:
            Service: ec2.amazonaws.com
          Action: sts:AssumeRole
      Path: /
  
 
  PROFILES3Instance:
    Type: AWS::IAM::InstanceProfile
    Properties: 
      Path: / 
      Roles:
         - Ref: ROLES3ReadOnlyEC2


  POLICYS3ReadOnly:
    Type: AWS::IAM::Policy
    Properties: 
      PolicyName: POLICYS3ReadOnly
      PolicyDocument:
        Version: 2012-10-17
        Statement: 
          - Effect: Allow
            Action:
              - s3:GetObject
            Resource: "*"
      Roles: 
        - Ref: ROLES3ReadOnlyEC2


  #########################
  ####### SECGROUPS #######
  #########################

  SECGROUPWebServer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Ingress http and ssh and Egress all Ports
      VpcId: 
        Fn::ImportValue: 
          !Sub "${EnvironmentName}-VPCHAWebApp"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0            
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 65535
          CidrIp: 0.0.0.0/0

  
  SECGROUPLoadBalancer:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow Ingress http and Egress http
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCHAWebApp"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0


  #########################
  ##### LOADBALANCER ######
  #########################

  TARGETGROUPWebApp:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 20
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 10
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 5
      Port: 80
      Protocol: HTTP
      VpcId: 
        Fn::ImportValue: !Sub "${EnvironmentName}-VPCHAWebApp"


  LOADBALANCERWebApp:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-SUBNETpublic01"
        - Fn::ImportValue: !Sub "${EnvironmentName}-SUBNETpublic02"
      SecurityGroups:
        - Ref: SECGROUPLoadBalancer
 
 
  LISTENERWebApp: 
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn: 
            Ref: TARGETGROUPWebApp
      LoadBalancerArn: 
        Ref: LOADBALANCERWebApp
      Port: 80
      Protocol: HTTP
  

  LISTENERRULEWebApp:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions: 
        - Type: forward
          TargetGroupArn:
            Ref: TARGETGROUPWebApp
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn:
        Ref: LISTENERWebApp
      Priority: 1


  #########################
  # INSTANCE/AUTOSCALING ##
  #########################

  # test machine for investigating userdata success

  #EC2Instance: 
    #Type: AWS::EC2::Instance
    #Properties: 
      #UserData:
        #Fn::Base64: !Sub |
          #!/bin/bash
          #exec > >(tee /var/log/cloud-init-output.log | logger -t cloud-init-output -s 2>/dev/console) 2>&1
          #apt-get update -y
          #apt-get install unzip awscli -y
          #apt-get install apache2 -y
          #aws s3 cp --region us-west-2 s3://${PS3BucketName}/${PS3Filepath} .
          #sudo unzip -o ${PS3Filepath} -d /var/www/html/
      #ImageId: ami-898dd9b9
      #InstanceType: t2.medium
      #KeyName: ssh_access
      #IamInstanceProfile:
        #Ref: PROFILES3Instance
      #NetworkInterfaces: 
      #- AssociatePublicIpAddress: "true"
        #DeviceIndex: "0"


  LAUNCHCONFIGWebApp: 
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          exec > >(tee /var/log/cloud-init-output.log | logger -t cloud-init-output -s 2>/dev/console) 2>&1
          apt-get update -y
          apt-get install unzip awscli -y
          apt-get install apache2 -y
          systemctl start apache2.service
          aws s3 cp --region us-west-2 s3://${PS3BucketName}/${PS3Filepath} .
          sudo unzip -o ${PS3Filepath} -d /var/www/html/
      ImageId: ami-898dd9b9
      InstanceType: t2.medium
      IamInstanceProfile:
        Ref: PROFILES3Instance
      SecurityGroups:
        - Ref: SECGROUPWebServer
      BlockDeviceMappings:
        - DeviceName: "/dev/sdf"
          Ebs:
             VolumeSize: '10'


  AUTOSCALINGGROUPWebApp:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: 
        - Fn::ImportValue: !Sub "${EnvironmentName}-SUBNETSprivate"
      LaunchConfigurationName:
        Ref: LAUNCHCONFIGWebApp
      MinSize: '2'
      MaxSize: '5'
      TargetGroupARNs:
        - Ref: TARGETGROUPWebApp


Outputs: 
  
  OLOADBALANCERWebAppDNS:
    Description: URL of public LoadBalancer DNS Address
    Value: !Join [ "", [ "http://", !GetAtt LOADBALANCERWebApp.DNSName ] ]


